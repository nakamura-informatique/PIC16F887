CCS PCM C Compiler, Version 5.109, 43599               28-Sep-23 08:04

               Filename:   C:\Users\dell\Desktop\External Interruptions\src.lst

               ROM used:   90 words (1%)
                           Largest free fragment is 2048
               RAM used:   13 (4%) at main() level
                           13 (4%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   035
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   02F
.................... //Uses a microcontroller to control an output pin (D0) based on a signal from a push button connected to an external interrupt pin (EXT)
.................... #include <16F887.h> //preprocessor directive to include the library for the PIC16F887 microcontroller.
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
.................... 
.................... #list
.................... 
.................... #fuses HS, NOPROTECT //preprocessor guide for configuring program-based options. In this case, it sets the clock to High-Speed ??(HS) and does not enable memory protection (NOPROTECT).
.................... #use delay(clock=20000000) 
.................... #byte PORTD=0x08 //name PORTD as a variable to easily access its output pins
.................... #bit D0=0x08.0 //name PORTD as a variable to easily access its output pins
.................... int1 i; //boolean variable give only 0 or 1
.................... #INT_EXT //interrupts external
.................... void Nut_Nhan() 
.................... { 
....................    i= ~i;//This function inverts the value of variable i. If i is 0, it becomes 1 and vice versa.
002F:  MOVLW  01
0030:  XORWF  27,F
0031:  BCF    0B.1
0032:  BCF    0A.3
0033:  BCF    0A.4
0034:  GOTO   01B
.................... } 
.................... 
.................... void main() 
0035:  MOVF   03,W
0036:  ANDLW  1F
0037:  MOVWF  03
0038:  BSF    03.5
0039:  BSF    03.6
003A:  MOVF   09,W
003B:  ANDLW  C0
003C:  MOVWF  09
003D:  BCF    03.6
003E:  BCF    1F.4
003F:  BCF    1F.5
0040:  MOVLW  00
0041:  BSF    03.6
0042:  MOVWF  08
0043:  BCF    03.5
0044:  CLRF   07
0045:  CLRF   08
0046:  CLRF   09
0047:  BCF    03.7
.................... { 
....................    SET_TRIS_D(0); //portD are output
0048:  MOVLW  00
0049:  BSF    03.5
004A:  BCF    03.6
004B:  MOVWF  08
....................    enable_interrupts(GLOBAL); //This function enables a global interrupt for the microcontroller
004C:  MOVLW  C0
004D:  BCF    03.5
004E:  IORWF  0B,F
....................    enable_interrupts(INT_EXT); //This function enables a peripheral interrupt.
004F:  BSF    0B.4
....................    ext_int_edge(H_to_L); //This function configures the falling edge of the peripheral interrupt. When the button is pressed, an interrupt event occurs.
0050:  BSF    03.5
0051:  BCF    01.6
....................    i= 0; //initial value
0052:  BCF    03.5
0053:  BCF    27.0
....................    while(TRUE) 
....................       { 
....................          D0 = i;  
0054:  BTFSS  27.0
0055:  BCF    08.0
0056:  BTFSC  27.0
0057:  BSF    08.0
0058:  GOTO   054
....................       } 
.................... }
0059:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
